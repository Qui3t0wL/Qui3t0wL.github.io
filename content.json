{"meta":{"title":"Qui3t0wL's blog","subtitle":"","description":"","author":"Qui3t0wL","url":"http://Qui3t0wL.github.io","root":"/"},"pages":[{"title":"Links","date":"2020-02-01T23:12:49.000Z","updated":"2020-02-01T23:14:03.601Z","comments":true,"path":"links/index.html","permalink":"http://qui3t0wl.github.io/links/index.html","excerpt":"","text":""},{"title":"Categories","date":"2020-02-01T23:07:39.000Z","updated":"2020-02-01T23:10:11.396Z","comments":false,"path":"categories/index.html","permalink":"http://qui3t0wl.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2020-02-01T23:11:20.000Z","updated":"2020-02-01T23:12:05.106Z","comments":false,"path":"tags/index.html","permalink":"http://qui3t0wl.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-02-01T23:02:39.000Z","updated":"2020-02-01T23:04:26.286Z","comments":false,"path":"repository/index.html","permalink":"http://qui3t0wl.github.io/repository/index.html","excerpt":"","text":""},{"title":"About","date":"2020-01-31T23:22:30.000Z","updated":"2020-02-01T23:31:01.643Z","comments":false,"path":"about/index.html","permalink":"http://qui3t0wl.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexion CTF 2020","slug":"hexion-ctf-2020","date":"2020-04-17T10:13:28.000Z","updated":"2020-04-22T22:42:36.534Z","comments":true,"path":"2020/04/17/hexion-ctf-2020/","link":"","permalink":"http://qui3t0wl.github.io/2020/04/17/hexion-ctf-2020/","excerpt":"","text":"In between of my study for CCNA module #1 I could found a couple of hours, in the last sunday (April 12th 2020), to took part in the first CTF hosted by Hexion Team. The balance was quite positive, with 4 solves: 3 of them was the easiest that worth a fixed values (50 and 100 points) and the other one, a pcap file. I ended up in 77th position with 1089 points amongst 429 teams. About - Misc (50 pts) Description: Please read the rules üòÉ This challenge had 1013 solves and was the entry point in the game. In the rules page we could found all the information about the CTF. At the end we found the ctf flag format and our flag. hexCTF{mu5t_b3_7he_eas1est_fl4g_y0u_g0t} Well Known - Web (100pts) Well‚Ä¶ it‚Äôs known (: https://wk.hexionteam.com Author: Yarin This challenge had 277 solves and was easy, you only had to know where to search. My approach it‚Äôs always the same, with a quick lookup in the page source code, next in the .htaccess and robots.txt (if exists). After that we‚Äôll see‚Ä¶ It was an empty page with a H1 stating &quot;404 Not Found&quot;. So I jumped for the .htaccess and I got another &quot;404 Not Found&quot;. Next I checked for the existence of robots.txt and I had success. 1Sitemap: sitemap.xml2Allow: * This page points me to another one, so I went to the sitemap.xml. 1&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;2&lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt;3 &lt;url&gt;4 &lt;loc&gt;https://wk.hexionteam.com/404.html&lt;/loc&gt;5 &lt;/url&gt;6 &lt;url&gt;7 &lt;loc&gt;https://wk.hexionteam.com/robots.txt&lt;/loc&gt;8 &lt;/url&gt;9 &lt;url&gt;10 &lt;loc&gt;https://wk.hexionteam.com/.well-known/security.txt&lt;/loc&gt;11 &lt;/url&gt;12&lt;/urlset&gt; Here we get 3 links and we already checked two. So, let‚Äôs check the .well-known/security.txt. 1Flag: hexCTF&#123;th4nk_y0u_liv3_0v3rfl0w&#125; And we have our flag! üéâ hexCTF{th4nk_y0u_liv3_0v3rfl0w} Mirage - Misc (100pts) ‚ÄúYour eyes can deceive you; don‚Äôt trust them.‚Äù ‚Äì Obi-Wan Kenobi https://mirage.hexionteam.com Author: Idan The site has a simple textbox and a strange statement similar to the flag format. I typed some characters into this textbox and those ones didn‚Äôt match those I had typed in. As I said before this seems to be similar to the flag format, so I tried type the beginning of the flag hexCTF{ and I got this. I matches! It‚Äôs the flag! Now I have to decrypt it. The first thing I had done was view the source code of the page. 1&lt;html&gt;2 &lt;head&gt;3 &lt;title&gt;&lt;/title&gt;4 &lt;/head&gt;5 &lt;style&gt;6 .centered &#123;7 position: fixed;8 top: 50%;9 left: 50%;10 transform: translate(-50%, -50%);11 &#125;1213 @font-face &#123;14 font-family: hexFont;15 src: url(\"assets/hexfont.ttf\");16 &#125;1718 input &#123;19 font-family: hexFont;20 font-size: 40px;21 font: url22 &#125;23 &lt;/style&gt;24 &lt;body&gt;25 &lt;div class=\"centered\" style=\"text-align: center;\"&gt;26 &lt;img src=\"assets/flag.png\" width=845 height=51/&gt;27 &lt;br&gt;28 &lt;input&gt;&lt;/input&gt;29 &lt;/div&gt;30 &lt;/body&gt;31&lt;/html&gt; Interesting! The source code has the font file (hexfont.ttf) used for this encryption. In this case my approach was download the font file and match the characters from the flag to the font. hexCTF{Don7_judge_a_B0Ok_by_1ts_c0v3r} T&amp;J - Misc (894pts) Can you help Tom catch Jerry? Author: Idan This challenge was my personal goal in this CTF, mainly because it‚Äôs a .pcap challenge - my prefered. When I saw this usb .pcap only with URB_INTERRUPT in frames I reminded my last usb capture from a previous CTF challenge: a capture from an usb flash drive and a keyboard. But this one don‚Äôt seems had the same standard in the Leftover Capture Data‚Ä¶ Ok, if it wasn‚Äôt from a keyboard probably was from a mouse. Yeah the name of the challenge is T&amp;J - Tom &amp; Jerry (the cat and mouse). So I started learn how the Leftover Capture Data was decrypted and after some Googling I‚Äôve found the USB specification. There under the mouse specification I‚Äôve found the way how mouse sends data (page 71): the 1st byte defines which button it‚Äôs pressed, the 2nd represents the X axis and the 3rd byte the Y axis. So I exported it into a text file using tshark: $ tshark -r jerry.pcapng -Y &quot;(usb.transfer_type == 0x01) &amp;&amp; (usb.src == \\&quot;1.2.1\\&quot;) &amp;&amp; !(usb.capdata == 00:00:00:00:00:00:00:00)&quot; -T fields -e usb.capdata &gt; data.txt I get all the Leftover Capture Data into data.txt file. 1$ cat data.txt2301000000000000004010001000000010050100010000000100601000100000001007...800ff0000ffff0000900ff0000ffff00001000ff0000ffff0000110100000000000000 Now I had to parse it and plot all the X-Y pairs into a ‚Äúscreen‚Äù. I reuse a python script inspired in one writeup in disconnect3d‚Äôs blog when he uses the PIL python‚Äôs library to plot all de coordinates into a png image. 1#!/usr/bin/env python23from PIL import Image4import ctypes56width = 40487height = 40488img = Image.new(\"RGB\", (width, height))910red = (0, 0, 0) # Skipping Right Mouse Btn, its not needed at all11green = (0, 255, 0)12blue = (0, 0, 255)13default = (0, 0, 0)1415colormap = &#123;16 0: red,17 1: green,18 2: blue19&#125;20x = width/221y = height/22223with open('data.txt') as f:24 for line in f:25 b0 = int(line[0:2],16)26 b1 = int(line[2:4],16)27 b2 = int(line[4:6],16)2829 # byte0: 0==LBM, 1=RBM, 2=MBM30 color = colormap.get(b0, default)3132 # byte1: X displacement33 x_dis = ctypes.c_int8(b1).value3435 # byte2: Y displacement36 y_dis = ctypes.c_int8(b2).value3738 x = x + x_dis39 y = y + y_dis4041 #print \"line = \", line, \"bytes =\", bytes, x, y4243 img.putpixel((x, y), color)4445img.save(\"image.png\") And here is the image and our flag! hexCTF{y3t_an0th3r_pc4p_ch4ll3nge}","categories":[{"name":"CTF","slug":"CTF","permalink":"http://qui3t0wl.github.io/categories/CTF/"}],"tags":[{"name":"Forensics","slug":"Forensics","permalink":"http://qui3t0wl.github.io/tags/Forensics/"},{"name":"PCAP","slug":"PCAP","permalink":"http://qui3t0wl.github.io/tags/PCAP/"}]},{"title":"AngstromCTF 2020","slug":"angstrom-ctf-2020","date":"2020-03-29T21:07:15.000Z","updated":"2020-04-14T18:50:45.180Z","comments":true,"path":"2020/03/29/angstrom-ctf-2020/","link":"","permalink":"http://qui3t0wl.github.io/2020/03/29/angstrom-ctf-2020/","excerpt":"","text":"Only now I have time to put writing in order. It‚Äôs the only good part of the quarantine time we live‚Ä¶ This time I bring to you my point of view of the Angstrom CTF I‚Äôve entered in march, from 14th to 19th. I tooked a bit more than the usual ctf‚Äôs but it worth it, mostly because I could learn a lot during the game. I think it was the first time I could reverse some stuff (3 challenges) using Ghidra and gdb - it was really cool! üòé This ctf competition had Misc, Web, Crypto, Binary and Rev categories with 47 total challenges. During the five competition days I could manage to solve ten of them, and the eleventh I took the flag a few minutes after the end of the competition. Bad luck‚Ä¶ I ended up in 592nd place with 575 points. You can view my complete writeup in my github repo. The organizers release a public repository with the solves for the challenges at https://hackmd.io/@ZX59lFiyRu6ODiM2rFw7Wg/ry5FDNeI8#","categories":[{"name":"CTF","slug":"CTF","permalink":"http://qui3t0wl.github.io/categories/CTF/"}],"tags":[{"name":"Forensics","slug":"Forensics","permalink":"http://qui3t0wl.github.io/tags/Forensics/"},{"name":"PCAP","slug":"PCAP","permalink":"http://qui3t0wl.github.io/tags/PCAP/"},{"name":"Rev","slug":"Rev","permalink":"http://qui3t0wl.github.io/tags/Rev/"},{"name":"Web","slug":"Web","permalink":"http://qui3t0wl.github.io/tags/Web/"},{"name":"Crypto","slug":"Crypto","permalink":"http://qui3t0wl.github.io/tags/Crypto/"}]},{"title":"HackTM CTF 2020","slug":"hacktm-ctf-2020","date":"2020-02-11T12:06:13.000Z","updated":"2020-04-14T18:43:08.676Z","comments":true,"path":"2020/02/11/hacktm-ctf-2020/","link":"","permalink":"http://qui3t0wl.github.io/2020/02/11/hacktm-ctf-2020/","excerpt":"","text":"To start february in the best way I managed to participated in a CTF to improve my forensics skills - the HackTM CTF (Quals) 2020. I ended in 253rd place out of 748 teams. Saddly, I only entered in the second day of the competition and only managed to solve 2 challenges. One easy and another one more complex. The first one was a kind of one-point-challenge and the other was a USB capture with some input devices communicating in. Recently, I did a similar challenge in HTB where I had to decode the keyboard inputs. In this challenge I had to extract a zip file with a text file inside, but firstly I needed to found the password that protects the zip file. The password was in the keyboard input‚Ä¶ My walkthrought it‚Äôs in my github repo.","categories":[{"name":"CTF","slug":"CTF","permalink":"http://qui3t0wl.github.io/categories/CTF/"}],"tags":[{"name":"Forensics","slug":"Forensics","permalink":"http://qui3t0wl.github.io/tags/Forensics/"},{"name":"PCAP","slug":"PCAP","permalink":"http://qui3t0wl.github.io/tags/PCAP/"}]},{"title":"</ Hello World >","slug":"hello-world","date":"2020-02-01T23:28:05.279Z","updated":"2020-02-01T23:28:05.279Z","comments":true,"path":"2020/02/01/hello-world/","link":"","permalink":"http://qui3t0wl.github.io/2020/02/01/hello-world/","excerpt":"","text":"Like programming, this is my first post here. I hope you enjoy my thoughts and feel free for share yours with me. Here I will have some content about cyber and stuff related to it. Enjoy! üòâ","categories":[{"name":"Void","slug":"Void","permalink":"http://qui3t0wl.github.io/categories/Void/"}],"tags":[]}],"categories":[{"name":"CTF","slug":"CTF","permalink":"http://qui3t0wl.github.io/categories/CTF/"},{"name":"Void","slug":"Void","permalink":"http://qui3t0wl.github.io/categories/Void/"}],"tags":[{"name":"Forensics","slug":"Forensics","permalink":"http://qui3t0wl.github.io/tags/Forensics/"},{"name":"PCAP","slug":"PCAP","permalink":"http://qui3t0wl.github.io/tags/PCAP/"},{"name":"Rev","slug":"Rev","permalink":"http://qui3t0wl.github.io/tags/Rev/"},{"name":"Web","slug":"Web","permalink":"http://qui3t0wl.github.io/tags/Web/"},{"name":"Crypto","slug":"Crypto","permalink":"http://qui3t0wl.github.io/tags/Crypto/"}]}